entity processador is
    port(
        clock : in std_logic;
    )
end entity;

architecture logic of processador is

    component pc is 
        port (
            clock:      in std_logic;
            in_port:    in std_logic;
            out_port:   out std_logic
        );
    end pc;

    component instruction_memory is
        port(
            in_port: in std_logic_vector(7 downto 0);
            out_op_code: out std_logic_vector(3 downto 0);
            out_rs: out std_logic_vector(1 downto 0);
            out_rt: out std_logic_vector(1 downto 0);
            out_jump: out std_logic_vector(3 downto 0)
        );
    end instruction_memory;

    component banco_reg IS
        port(
            clock: in std_logic;
            reg_write : in std_logic;
            in_reg_A : in std_logic_vector(1 downto 0);
            in_reg_B : in std_logic_vector(1 downto 0);
            write_data : in std_logic_vector(7 downto 0);
            out_reg_A : out std_logic_vector(7 downto 0);
            out_reg_B : out std_logic_vector(7 downto 0)
        );
    end component;

    component extensor4_8 is
        port(
            a : in std_logic_vector(3 downto 0);
            b : out std_logic_vector(7 downto 0)
        );
    end component;

    component shift_left8bits is
        port(
            in_A : in std_logic_vector(7 downto 0);
            S_out : out std_logic_vector(7 downto 0)
        );
    end component;

    component ram is
        port(
            clock : in std_logic;       -- clock
            in_A      : in std_logic_vector(7 downto 0); -- valor
            mem_write : in std_logic;   -- flag de escrita
            mem_read  : in std_logic;   -- flag de leitura
            addr      : in std_logic_vector(7 downto 0); -- endereço
            S_out     : out std_logic_vector(7 downto 0) -- saida
        );
    end component;

    component rom is
        port(
            clock : in std_logic;       -- clock
            in_A      : in std_logic_vector(7 downto 0); -- valor        
            S_out     : out std_logic_vector(7 downto 0) -- saida
        );
    end component;

    component somador8bits is
        port(
            A: in std_logic_vector(7 downto 0);
            B: in std_logic_vector(7 downto 0);
            cin: in std_logic;
            cout: out std_logic;
            s: out std_logic_vector(7 downto 0)
        );
    end component somador8bits;

    component subtrator is
        port(	
            in_a : in std_logic_vector (7 downto 0); 
            in_b : in std_logic_vector (7 downto 0);
            cout : out std_logic; 
            s: out std_logic_vector(7 downto 0)
        );
    end component;

    component multiplicador8bits is
        port map(
            in_A  : in std_logic(7 downto 0);   -- Multiplicador 8bits
            in_B  : in std_logic(7 downto 0);   -- Multiplicando 8bits
            S_out : out std_logic(15 downto 0)  -- Saida 16 bits
        );
    end component;

    component ula is
        port(
            clock	: in std_logic;						-- clock				(1bit)
            in_op 	: in std_logic_vector(3 downto 0);	-- operação da ula 		(4bits)
            in_A	: in std_logic_vector(7 downto 0);	-- entrada A			(8bits)
            in_B	: in std_logic_vector(7 downto 0);	-- entrada B			(8bits)
            S_out 	: out std_logic_vector(7 downto 0);	-- S_out				(8bits)
            z_out	: out std_logic 					-- Saida zero da ULA	(1bit)
        );
    end component;

    component controle is
        port(
            clock       : in std_logic;
            opcode      : in std_logic_vector(3 downto 0);
            reg_dst     : out std_logic;
            jump        : out std_logic;
            branch      : out std_logic;
            memRead     : out std_logic;
            memToReg    : out std_logic;
            ALUOp       : out std_logic_vector(3 downto 0);
            memWrite    : out std_logic;
            AluSrc      : out std_logic;
            RegWrite    : out std_logic      
        );
    end component;

begin

    

end;
